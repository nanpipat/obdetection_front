[{"C:\\Users\\User\\Documents\\obdetection\\src\\index.js":"1","C:\\Users\\User\\Documents\\obdetection\\src\\reportWebVitals.js":"2","C:\\Users\\User\\Documents\\obdetection\\src\\App.js":"3"},{"size":500,"mtime":1608020092027,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1608020092027,"results":"6","hashOfConfig":"5"},{"size":7298,"mtime":1611228311303,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ir4i62",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"C:\\Users\\User\\Documents\\obdetection\\src\\index.js",[],"C:\\Users\\User\\Documents\\obdetection\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Documents\\obdetection\\src\\App.js",["15","16","17","18","19","20","21"],"import React, { useState, useCallback, useRef } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport Webcam from 'react-webcam'\nimport Modal from 'react-modal';\nimport nvision from \"@nipacloud/nvision/dist/browser/nvision\"\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport Loader from 'react-loader-spinner';\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const webcamRef = useRef(null);\n  const [imgSrc, setImgSrc] = useState(null);\n  const [opencamera, setOpencamera] = useState(false);\n  const [modalIsOpen, setIsOpen] = useState(false);\n\n  const [filename, setFilename] = useState(\"\");\n  const [imgPreview, setImgPreview] = useState(null);\n  const [imgResult, setImgResult] = useState(null);\n  const [imgType, setImgType] = useState(null);\n\n  const capture = useCallback(() => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    console.log(imageSrc)\n    setImgSrc(imageSrc);\n  }, [webcamRef, setImgSrc]);\n\n  const customStyles = {\n    content: {\n      top: '50%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      marginRight: '-50%',\n      transform: 'translate(-50%, -50%)'\n    }\n  };\n  Modal.setAppElement('#root');\n\n  const objectDetectionService = nvision.objectDetection({\n    apiKey: \"cdb29f355cb4059995e05420dc8d963f657898bf3a5f2f5e7a88c58279f5e4a0a1c4c4cf874594b42e413fc45c425425ac\"\n  });\n\n  const openModal = () => {\n    setIsOpen(true);\n  }\n\n  const obDetect = (img) => {\n    setLoading(true);\n    console.log(img, \"test\")\n    if (!img) {\n      alert(\"Not Found Image\")\n      setLoading(false);\n      return\n    }\n    objectDetectionService.predict({\n      rawData: img.replace(\"data:\" + imgType + \";base64,\", \"\"),\n      outputCroppedImage: true,\n      outputVisualizedImage: true\n    }\n    ).then((result) => {\n      let resu = \"\";\n      resu = result.raw_data\n      setImgResult(\"data:\" + imgType + \";base64,\" + result.raw_data)\n      console.log(resu, \"asdasdasd\");\n      setLoading(false);\n    }, err => {\n      alert(err);\n      setLoading(false);\n    });\n\n  }\n\n  const filehandler = event => {\n    if (event.target.files[0]) {\n      let reader = new FileReader();\n      reader.readAsDataURL(event.target.files[0]);\n      reader.onload = () => {\n        // Make a fileInfo Object\n        console.log(\"Called\", reader);\n        setImgPreview(reader.result)\n      };\n      setFilename(event.target.files[0].name)\n      setImgType(event.target.files[0].type)\n    }\n    console.log(event.target.files[0], \"img\")\n  }\n\n\n  const upload = () => {\n    document.getElementById(\"selectImage\").click()\n  }\n\n  const submitModal = () => {\n    setFilename(\"Webcam Capture\")\n    setImgPreview(imgSrc)\n    setImgSrc(null);\n    setIsOpen(false);\n    setImgType(\"image/jpeg\")\n\n  }\n\n  const afterOpenModal = () => {\n\n  }\n\n  const closeModal = () => {\n    console.log(\"asdasdas\")\n    setImgSrc(null);\n    setIsOpen(false);\n  }\n\n  const cleardata = () => {\n    setFilename(null)\n    setImgPreview(null)\n    setImgResult(null)\n    setImgType(null)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Modal\n          isOpen={modalIsOpen}\n          onAfterOpen={() => afterOpenModal}\n          onRequestClose={() => closeModal}\n          style={customStyles}\n          contentLabel=\"Example Modal\"\n        >\n          <div className=\"modalCamera\">\n            <div style={{ width: \"100%\", display: \"flex\" }}>\n              <div style={{ width: \"50%\", textAlign: \"left\", paddingLeft: \"1rem\", justifyContent: \"left\" }}>\n                <h1>Take your photo... </h1>\n              </div>\n              <div style={{ width: \"50%\", textAlign: \"right\", justifyContent: \"right\" }}>\n                <button className=\"buttonUpload\" style={{ backgroundColor: \"red\", width: \"50px\", marginTop: \"18px\" }} onClick={() => closeModal()}>X</button>\n              </div>\n            </div>\n            {imgSrc ? <img\n              src={imgSrc}\n            />\n              :\n              <Webcam\n                audio={false}\n                ref={webcamRef}\n                screenshotFormat=\"image/jpeg\"\n              />\n            }\n\n            {\n              imgSrc ?\n                <div className=\"buttonRow\">\n                  <div className=\"buttonContainer\">\n                    <button className=\"buttonUpload\" style={{ marginRight: \"1rem\", backgroundColor: \"#3c84c0\" }} onClick={submitModal}>Submit</button>\n                    <button className=\"buttonUpload\" style={{ backgroundColor: \"#49b431\" }} onClick={() => setImgSrc(null)}>Snap Again</button>\n                  </div>\n                </div>\n                :\n                <div className=\"buttonRow\">\n                  <button className=\"buttonUpload\" style={{ backgroundColor: \"#af1b1b\" }} onClick={capture}>Capture photo</button>\n                </div>\n            }\n          </div>\n        </Modal>\n        <div className=\"previewImg\">\n          <div className=\"buttonRow\">\n            <img style={{ height: \"100px\", marginRight: \"1rem\" }}\n              src={imgPreview}\n            />\n            <h5>{filename}</h5>\n          </div>\n\n        </div>\n        <div className=\"buttonRow\">\n          <div className=\"buttonContainer\">\n            <button className=\"buttonUpload\" style={{ marginRight: \"1rem\", backgroundColor: \"#3c84c0\" }} onClick={upload}>Upload</button>\n            <input id='selectImage' hidden type=\"file\" onChange={filehandler} accept=\"image/*\" />\n            <h6 style={{ margin: 0, alignSelf: \"center\", marginRight: \"1rem\" }}>Or</h6>\n            <button className=\"buttonUpload\" style={{ backgroundColor: \"#49b431\" }} onClick={() => openModal(false)}>Use Webcam</button>\n          </div>\n        </div>\n        {\n          loading ? <Loader\n            type=\"Rings\"\n            color=\"#FFF\"\n            height={100}\n            width={100}\n            visible={loading}\n          />\n            :\n            <div>\n              <div className=\"buttonRow\">\n                <div className=\"buttonContainer\">\n                  <button className=\"buttonUpload\" disabled={imgPreview == null || imgPreview == ''} style={{ backgroundColor: \"#3c84c0\" }} onClick={() => obDetect(imgPreview)}>Generate</button>\n                </div>\n              </div>\n              <div className=\"buttonRow\">\n                <div className=\"buttonContainer\">\n                  <button className=\"buttonUpload\" style={{ backgroundColor: \"#af1b1b\" }} onClick={cleardata}>Clear</button>\n                </div>\n              </div>\n            </div>\n        }\n\n        {imgResult ? <div className=\"resultImg\" style={{ paddingBottom: \"2rem\" }}>\n          <h2>Result Image</h2>\n          <img style={{ maxHeight: \"700px\", maxWidth: \"70%\" }}\n            src={imgResult}\n          />\n        </div> :\n          <>\n            {\n              loading ? \"\"\n                :\n                <div className=\"buttonRow\">\n                  <div style={{ borderStyle: \"solid\", borderColor: \"white\", width: \"40%\", height: \"400px\", alignSelf: \"center\" }}>\n                    <h3>File input not found..</h3>\n                    <h3>Please upload and generate to see result.</h3>\n                  </div>\n                </div>\n            }\n          </>\n        }\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"22","severity":1,"message":"23","line":2,"column":8,"nodeType":"24","messageId":"25","endLine":2,"endColumn":12},{"ruleId":"22","severity":1,"message":"26","line":14,"column":10,"nodeType":"24","messageId":"25","endLine":14,"endColumn":20},{"ruleId":"22","severity":1,"message":"27","line":14,"column":22,"nodeType":"24","messageId":"25","endLine":14,"endColumn":35},{"ruleId":"28","severity":1,"message":"29","line":139,"column":23,"nodeType":"30","endLine":141,"endColumn":15},{"ruleId":"28","severity":1,"message":"29","line":167,"column":13,"nodeType":"30","endLine":169,"endColumn":15},{"ruleId":"31","severity":1,"message":"32","line":194,"column":95,"nodeType":"33","messageId":"34","endLine":194,"endColumn":97},{"ruleId":"28","severity":1,"message":"29","line":207,"column":11,"nodeType":"30","endLine":209,"endColumn":13},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'opencamera' is assigned a value but never used.","'setOpencamera' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]